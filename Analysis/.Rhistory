unique()
SalGallDat$RSAL <- as.factor(SalGallDat$RSAL)
SalGallDat$RGALLER <- as.factor(SalGallDat$RGALLER)
SalGallAdjWeight <- pivot_wider(SalGallDat, names_from=RSAL, values_from = weight) #Create adjacency matrix form
SalGallAdjWeight[is.na(SalGallAdjWeight)==TRUE] <- 0 #Replace NA's
SalGallAdjWeight %<>% column_to_rownames(., var="RGALLER")
SalGallDist <- as.data.frame(as.matrix(vegdist(x=SalGallAdjWeight, method=index)))
SalGallDist %<>% rownames_to_column(., var="RGALLER")
SalGallDist <- pivot_longer(SalGallDist, cols =!RGALLER, names_to = "RGALLER2", values_to="distance") #Turn into edgelist
SalGallDist$Gall1Key <- match(SalGallDist$RGALLER, rownames(SalGallAdjWeight))
SalGallDist$Gall2Key <- match(SalGallDist$RGALLER2, rownames(SalGallAdjWeight))
SalGallDist <- SalGallDist[SalGallDist$Gall1Key > SalGallDist$Gall2Key,] #These last three lines are my hacky way of taking out the symmetrical entries in the matrix. Can change later
SalGallDist$Salsimilarity <- 1-SalGallDist$distance
SalGallDist %<>% select(., RGALLER, RGALLER2, Salsimilarity)
SalGallDist %<>%
rowwise() %>%      # for each row
mutate(Combination = paste(sort(c(RGALLER, RGALLER2)), collapse = "-")) %>%  #sort alphabetically so combinations are the same
ungroup()          # forget the row grouping
SalGallDist %<>% select(., -RGALLER, -RGALLER2)
##################  Galler-Parasitoid Edgelist
if("RGALLER" %in% colnames(fullinteract)==FALSE| "RPAR" %in% colnames(fullinteract)==FALSE|"N_GALLS" %in% colnames(fullinteract)==FALSE |"NB_GALLS_PAR" %in% colnames(fullinteract)==FALSE ){
stop("Full Interaction Dataframe (used for parasite-galler info) is lacking correct columns. Input data should include RGALLER, RPAR, and N_GALLS, and NB_GALLS_PAR for each interaction") #Make sure our input has the correct columns
}
GallParDat <- df_interact %>%
select(., RGALLER, RPAR, N_GALLS, NB_GALLS_PAR) %>%
group_by(., RGALLER, RPAR) %>%
mutate("Prevalance"=sum(NB_GALLS_PAR)/sum(N_GALLS)) %>%
select(., -N_GALLS, -NB_GALLS_PAR) %>%
unique()
GallParDat$RGALLER <- as.factor(GallParDat$RGALLER) #Make sure these are factors
GallParDat$RPAR <- as.factor(GallParDat$RPAR)
GallParDat %<>% select(., RGALLER, RPAR, Prevalance)
GallParDat %<>% filter(., RPAR != "none")
GallParAdjWeight <- pivot_wider(GallParDat, names_from=RPAR, values_from = "Prevalance")
GallParAdjWeight[is.na(GallParAdjWeight)==TRUE] <- 0
GallParAdjWeight %<>% column_to_rownames(., var="RGALLER")
GallParDist <- as.data.frame(as.matrix(vegdist(GallParAdjWeight)))
GallParDist %<>% rownames_to_column(., var="RGALLER")
GallParDist <- pivot_longer(GallParDist, cols =!RGALLER, names_to = "RGALLER2", values_to="distance")
GallParDist$Gall1Key <- match(GallParDist$RGALLER, rownames(GallParAdjWeight))
GallParDist$Gall2Key <- match(GallParDist$RGALLER2, rownames(GallParAdjWeight))
GallParDist <- GallParDist[GallParDist$Gall1Key > GallParDist$Gall2Key,]
GallParDist$Parsimilarity <- 1-GallParDist$distance
GallParDist %<>% select(., RGALLER, RGALLER2, Parsimilarity)
GallParDist %<>%
rowwise() %>%      # for each row
mutate(Combination = paste(sort(c(RGALLER, RGALLER2)), collapse = "-")) %>%  #sort alphabetically so combinations are the same
ungroup()          # forget the row grouping
edgelist <- left_join(GallParDist, SalGallDist, by="Combination")
##################  Creating Network
GallsProjSal <- edgelist %>%
select(., RGALLER, RGALLER2, Salsimilarity) %>%
filter(., Salsimilarity > 0) %>%
dplyr::rename(., weight = Salsimilarity) %>%
graph_from_data_frame(d=., directed = FALSE)
GallsProjPar <- edgelist %>%
select(., RGALLER, RGALLER2, Parsimilarity) %>%
filter(., Parsimilarity > 0) %>%
dplyr::rename(., weight = Parsimilarity) %>%
graph_from_data_frame(d=., directed = FALSE)
output <- list(edgelist, GallsProjSal, GallsProjPar)
names(output) <-c("edgelist", "GallsProjSal", "GallsProjPar")
return(output)
}
df_interact <- read.csv("../csv/df_interact.csv", sep=";")
str(df_interact)
df_salix_galler <- readRDS(".././rdata/df_salix_galler.rds")
GallerProjections <- projectGallW8(salixGaller = df_salix_galler, fullinteract = df_interact, index = "bray")
get_node_props <- function(network){
node_props <- data.frame(V(network)$name,
centralization.closeness(network)$res,
centralization.betweenness(network)$res,
degree(network),
strength(network))
colnames(node_props) <- c("name", "closeness", "betweenness", "degree", "strength")
temp <- scale(node_props[,2:ncol(node_props)])
colnames(temp) <- paste(colnames(temp), "z", sep="_")
node_props <- cbind(node_props, temp)
return(node_props)
}
GPP_NoPro <- get_node_props(GallerProjections$GallsProjPar)
GPP_NoPro %<>% filter(., name %in% tree$tip.label)
pdf(file="../Figures/GPP_NoPro_Phylo.pdf", height=8, width = 8)
par(mfrow=c(2,2))
plotTree.barplot(tree,
setNames(GPP_NoPro$closeness_z,
rownames(GPP_NoPro)),
fsize=0.15,
args.barplot=list(xlab="Closeness Centralizty (z-score)",
xlim=c(-3,1.5)))
plotTree.barplot(tree,
setNames(GPP_NoPro$betweenness_z,
rownames(GPP_NoPro)),
fsize=0.15,
args.barplot=list(xlab="Betweenness Centralizty (z-score)",
xlim=c(-3,1.5)))
plotTree.barplot(tree,
setNames(GPP_NoPro$degree_z,
rownames(GPP_NoPro)),
fsize=0.15,
args.barplot=list(xlab="Degree Centrality (z-score)",
xlim=c(-3,1.5)))
plotTree.barplot(tree,
setNames(GPP_NoPro$strength_z,
rownames(GPP_NoPro)),
fsize=0.15,
args.barplot=list(xlab="Strength (z-score)",
xlim=c(-3,1.5)))
plot(GPP_NoPro)
plot(GallerProjections$GallsProjPar)
litter <- PVR::PVRdecomp(phy=tinsel, type="nexus")
EigVec <- data.frame(litter@Eigen$vectors)
EigVal <- data.frame(litter@Eigen$values)
GPP_NoPro$Eig1 <- EigVec$c1
GPP_NoPro$Eig2 <- EigVec$c2
GPP_NoPro$Eig3 <- EigVec$c3
GPP_NoPro$Eig4 <- EigVec$c4
#pdf(file="../Figures/Parasite_EigDecomp.pdf",width = 8, height=8)
par(mfrow=c(2,2))
plotTree.wBars(tree,setNames(GPP_NoPro$Eig1+abs(min(GPP_NoPro$Eig1)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(GPP_NoPro$Eig2+abs(min(GPP_NoPro$Eig2)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(GPP_NoPro$Eig3+abs(min(GPP_NoPro$Eig3)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
plot(x=1:length(EigVal[,1]), y=100*EigVal[,1]/sum(EigVal[,1]),xlab="Eigenvalue",ylab="% Variance Explained")
#plotTree.wBars(tree,setNames(GPP_NoPro$Eig4+abs(min(GPP_NoPro$Eig4)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
sum(EigVal[1:3,1])/sum(EigVal[,1])
?plot.Tree.wBars
w <- 1/cophenetic(tr)
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig2,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 2",
xlim=c(min(GPP_NoPro$Eig2),max(GPP_NoPro$Eig2))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig3,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 3",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig3))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig4,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 4",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig4))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1+min(abs(GPP_NoPro$Eig1)),
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig2,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 2",
xlim=c(min(GPP_NoPro$Eig2),max(GPP_NoPro$Eig2))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig3,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 3",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig3))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig4,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 4",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig4))))
EigVec
EigVal
sum(EigVal$litter.Eigen.values)
EigVal$litter.Eigen.values <- EigVal$litter.Eigen.values/(sum(EigVal$litter.Eigen.values))
EigVal$litter.Eigen.values
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
GPP_NoPro$Eig1
GPP_NoPro
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
plot(x=1:length(EigVal[,1]), y=100*EigVal[,1]/sum(EigVal[,1]),xlab="Eigenvalue",ylab="% Variance Explained")
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1+abs(min(EigVec$c1)), tree$tip.label))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1+abs(min(EigVec$c1)), tree$tip.label))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1), tree$tip.label))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1, tree$tip.label))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig1))))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1, tree$tip.label))
plotTree.barplot(tree, setNames(GPP_NoPro$Eig1, rownames(GPP_NoPro)))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1, tree$tip.label))
plotTree.barplot(tree, setNames(GPP_NoPro$Eig1, rownames(GPP_NoPro)))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1, tree$tip.label))
phytools::plotTree.wBars(tree, setNames(GPP_NoPro$Eig1, rownames(GPP_NoPro)))
phytools::plotTree.wBars(tree, setNames(GPP_NoPro$Eig1, rownames(GPP_NoPro)))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1, tree$tip.label))
rownames(GPP_NoPro)
tree$tip.label
rownames(GPP_NoPro)
tree$tip.label %in% rownames(GPP_NoPro)
tree$tip.label == rownames(GPP_NoPro)
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig1,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 1",
xlim=c(min(GPP_NoPro$Eig2),max(GPP_NoPro$Eig2))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig2,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 2",
xlim=c(min(GPP_NoPro$Eig2),max(GPP_NoPro$Eig2))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig3,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 3",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig3))))
plotTree.barplot(tree,
setNames(GPP_NoPro$Eig4,
rownames(GPP_NoPro)),
args.barplot=list(xlab="Eigvenvector 4",
xlim=c(min(GPP_NoPro$Eig1),max(GPP_NoPro$Eig4))))
par(mfrow=c(2,2))
plotTree.wBars(tree,setNames(GPP_NoPro$Eig1+abs(min(GPP_NoPro$Eig1)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(GPP_NoPro$Eig2+abs(min(GPP_NoPro$Eig2)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(GPP_NoPro$Eig3+abs(min(GPP_NoPro$Eig3)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
plot(x=1:length(EigVal[,1]), y=100*EigVal[,1]/sum(EigVal[,1]),xlab="Eigenvalue",ylab="% Variance Explained")
#plotTree.wBars(tree,setNames(GPP_NoPro$Eig4+abs(min(GPP_NoPro$Eig4)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
sum(EigVal[1:3,1])/sum(EigVal[,1])
plotTree.wBars(tree,setNames(EigVec$c1+abs(min(EigVec$c1)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
par(mfrow=c(2,2))
plotTree.wBars(tree,setNames(EigVec$c1+abs(min(EigVec$c1)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(EigVec$c2+abs(min(EigVec$c2)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(EigVec$c3+abs(min(EigVec$c3)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
plot(x=1:length(EigVal[,1]), y=100*EigVal[,1]/sum(EigVal[,1]),xlab="Eigenvalue",ylab="% Variance Explained")
#plotTree.wBars(tree,setNames(GPP_NoPro$Eig4+abs(min(GPP_NoPro$Eig4)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
sum(EigVal[1:3,1])/sum(EigVal[,1])
pdf(file="../Figures/FIXED_Parasite_EigDecomp.pdf",width = 8, height=8)
par(mfrow=c(2,2))
plotTree.wBars(tree,setNames(EigVec$c1+abs(min(EigVec$c1)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(EigVec$c2+abs(min(EigVec$c2)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=T, lwd=1)
plotTree.wBars(tree,setNames(EigVec$c3+abs(min(EigVec$c3)), tree$tip.label),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
plot(x=1:length(EigVal[,1]), y=100*EigVal[,1]/sum(EigVal[,1]),xlab="Eigenvalue",ylab="% Variance Explained")
#plotTree.wBars(tree,setNames(GPP_NoPro$Eig4+abs(min(GPP_NoPro$Eig4)), rownames(GPP_NoPro)),type="fan", fsize=0.6, scale=.25, tip.labels=TRUE, lwd=1)
tree <- ape::read.nexus(file="../Data/Nyman_Phylogeny.nex")
tree <- phytools::force.ultrametric(tree)
litter <- PVR::PVRdecomp(phy=tree, type="nexus")
EigVec <- data.frame(litter@Eigen$vectors)
EigVal <- data.frame(litter@Eigen$values)
EigVal$litter.Eigen.values <- EigVal$litter.Eigen.values/(sum(EigVal$litter.Eigen.values))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c1+abs(min(EigVec$c1)), tree$tip.label))
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c2+abs(min(EigVec$c2)), tree$tip.label))
tree$Nnode
tree$root.edge
str(tree)
?phytools::getParent
phytools::getParent(tree, 1)
phytools::getParent(tree, 86)
phytools::getParent(tree, 85)
phytools::getParent(tree, 83)
phytools::getParent(tree, 25)
phytools::getDescendants(tree, 25)
phytools::getDescendants(tree, 1)
phytools::getDescendants(tree, 2)
phytools::getDescendants(tree, 3)
phytools::getDescendants(tree, 4)
phytools::getDescendants(tree, 86)
phytools::getDescendants(tree, 100)
phytools::getDescendants(tree, 98)
plot(tree,no.margin=TRUE,edge.width=2,cex=0.7)
nodelabels(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree))
phytools::getDescendants(tree, 57)
1:tree$Nnode
1:tree$Nnode
Ntip(tree)
?nodelabels
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.8)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.1)
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.2)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.2)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.3)
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
phytools::getDescendants(tree, 48)
1:tree$Nnode
phytools::getDescendants(tree, 1)
phytools::getDescendants(tree, 71)
phytools::getParent(tree, 71)
?getDescendants
phangorn::Descendants
phangorn::Descendants(tree, )
phytools::getParent(tree, )74
phytools::getDescendants(tree, 74)
phytools::getParent(tree, 74)
(tree, 74)
phytools::getDescendants(tree, 74)
phangorn::Descendants(tree, 74)
phytools::getDescendants(tree, 74)
phangorn::Descendants(tree, 75)
phangorn::Descendants(tree, 76)
phangorn::Descendants(tree)
1:tree$Nnode
1:tree$Nnode
1:tree$Nnode+Ntip(tree)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode,node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
phytools::getDescendants(tree, 120)
phytools::getDescendants(tree, 120)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
phytools::getDescendants(tree, 120)
tree$tip.label
phytools::getDescendants(tree, 120)
phytools::getDescendants(tree, 120)[phytools::getDescendants(tree, 120) < length(tree$tip.label)]
tree$tip.label[x]
x <- phytools::getDescendants(tree, 120)[phytools::getDescendants(tree, 120) < length(tree$tip.label)]
tree$tip.label[x]
phytools::getDescendants(tree, 120)
x <- phytools::getDescendants(tree, 120)[phytools::getDescendants(tree, 120) < length(tree$tip.label)]
tree$tip.label[x]
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
tree2 <- ape::drop.tip(tree, tree$tip.label[x])
plotTree(tree2,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
tree2 <- ape::drop.tip(tree, tree$tip.label[x])
plotTree(tree2,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
for(i in 1:nreps){
#Choose a random set of nodes to remove
#Check our remaining tree still would have enough tips remaining
#Get the descendants of those nodes and remove them
#Run a phylodecomp on that tree
#Save that tree and its decomp
}
tree$Nnode
tree$Nnode
length(tree$tip.label)
tree$Nnode
#Choose a random set of nodes to remove
?rpois
#Choose a random set of nodes to remove
?rint
#Choose a random set of nodes to remove
sample(1:10)
#Choose a random set of nodes to remove
sample(1:10, size=1)
#Choose a random set of nodes to remove
numNodes <- sample(1:10, size=1)
numNodes
sample(1:tree$Nnode, size=numNodes, replace = FALSE)
to_drop <- sample(1:tree$Nnode, size=numNodes, replace = FALSE) + length(tree$tip.label)
to_drop
int_drops <- sample(1:tree$Nnode, size=numNodes, replace = FALSE) + length(tree$tip.label)
int_drops
#Check our remaining tree still would have enough tips remaining
getDescendants(tree, int_drops)
#Check our remaining tree still would have enough tips remaining
getDescendants(tree, int_drops[1])
#Check our remaining tree still would have enough tips remaining
getDescendants(tree, int_drops[1])
plotTree(tree,type="fan",fsize=0.9,ftype="i")
labelnodes(text=1:tree$Nnode+Ntip(tree),node=1:tree$Nnode+Ntip(tree),
interactive=FALSE,circle.exp=0.9,cex=0.5)
#Check our remaining tree still would have enough tips remaining
x <- getDescendants(tree, int_drops[1])
x <- c(x, getDescendants(tree, int_drops[2]))
x
x <- c(x, getDescendants(tree, int_drops[3]))
x
sessionInfo()
phytools::plotTree.wBars(tree=tree, setNames(EigVec$c2+abs(min(EigVec$c2)), tree$tip.label))
numNodes
1:tree$Nnode
sample(1:tree$Nnode, size=numNodes, replace = FALSE)
length(tree$tip.label)
int_drops <- sample(1:tree$Nnode, size=numNodes, replace = FALSE) + length(tree$tip.label)
int_drops
x <- getDescendants(tree, int_drops[1])
x
#Check our remaining tree still would have enough tips remaining
x <- NULL
for(j in 1:numNodes){
x <- c(x,getDescendants(tree, int_drops[j]))
}
x <- unique()
x <- unique(x)
x
x <- x[x<=length(tree$tip.label)]
x
length(randPruned) < 0.2*length(tree$tip.label)
randPruned <- NULL
for(j in 1:numNodes){
randPruned <- c(randPruned,getDescendants(tree, int_drops[j]))
}
randPruned <- unique(randPruned)
randPruned <- randPruned[randPruned<=length(tree$tip.label)]
length(randPruned) < 0.2*length(tree$tip.label)
length(randPruned)
length(randPruned) < 0.8*length(tree$tip.label) #Check the number
tree$tip.label
tree$tip.label[randPruned]
randPruned
tree$tip.label[25]
tree$tip.label[randPruned]
temp <- ape::drop.tip(tree, tree$tip.label[randPruned])
plot(temp)
randPruned <- ape::drop.tip(tree, tree$tip.label[toPrune])
numNodes <- sample(1:5, size=1)
int_drops <- sample(1:tree$Nnode, size=numNodes, replace = FALSE) + length(tree$tip.label)
#Check our remaining tree still would have enough tips remaining
toPrune <- NULL
for(j in 1:numNodes){
toPrune <- c(toPrune,getDescendants(tree, int_drops[j]))
}
toPrune <- unique(toPrune)
toPrune <- toPrune[toPrune<=length(tree$tip.label)]
length(toPrune) < 0.8*length(tree$tip.label) #Check the number of pruned nodes is sub 80% (at least 20% of tips remaining)
#Get the descendants of those nodes and remove them
randPruned <- ape::drop.tip(tree, tree$tip.label[toPrune])
randPruned
PVR::PVRdecomp(phy=randPruned, type="nexus")
#Run a phylodecomp on that tree
x <- PVR::PVRdecomp(phy=randPruned, type="nexus")
class(x)
x <- PVR::PVRdecomp(phy=randPruned, type="nexus")
x@phyDist
?PVRdecomp
x@Eigen$values
(x@Eigen$values)/sum(x@Eigen$values)
(x@Eigen$values)*100/sum(x@Eigen$values)
(x@Eigen$values)/sum(x@Eigen$values)
i <- 1
c(i, (x@Eigen$values)/sum(x@Eigen$values))
output <- NULL
#Save that tree and its decomp
output <- rbind(output, c(i, (x@Eigen$values)/sum(x@Eigen$values)))
#Save that tree and its decomp
output <- rbind(output, c(i, (x@Eigen$values)/sum(x@Eigen$values)))
View(output)
data.frame("value"=i)
data.frame("value"= i, "axis"=names((x@Eigen$values)/sum(x@Eigen$values)))
((x@Eigen$values)/sum(x@Eigen$values))[1:10]
data.frame("value"= i, "axis"=names(((x@Eigen$values)/sum(x@Eigen$values))[1:10])
#Save that tree and its decomp
output <- rbind(output, c(i, (x@Eigen$values)/sum(x@Eigen$values)))
data.frame("value"= i, "axis"=names(((x@Eigen$values)/sum(x@Eigen$values))[1:10]))
data.frame("rep"= i, "vectorID"=names(((x@Eigen$values)/sum(x@Eigen$values))[1:10]), "eivenvector"=((x@Eigen$values)/sum(x@Eigen$values))[1:10])
data.frame("rep"= i, "vectorID"=names(((x@Eigen$values)/sum(x@Eigen$values))[1:10]), "PropVar"=((x@Eigen$values)/sum(x@Eigen$values))[1:10])
length(randPruned$tip.label)
numNodes
install.packages("CommEcol")
library(CommEcol)
?CommEcol::treeNodf()
randPruned
library(igraph)
library(igraph)
as.igraph(randPruned)
graphed <- as.igraph(randPruned)
plot(graphed)
?igraph::igraph_community_optimal_modularity
?igraph::igraph_community_optimal_modularity
igraph::cluster_optimal(graphed)
igraph::cluster_optimal(graphed)
sessionInfo()
install.packages("igraph")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(PVR)
library(ape)
library(phytools)
library(CommEcol)
library(igraph)
igraph::cluster_optimal(graphed)
